from langchain_openai import ChatOpenAI
import os
from flask import Flask, jsonify, request
from langchain_community.utilities.sql_database import SQLDatabase
from langchain_core.prompts import ChatPromptTemplate
from langchain_core.runnables import RunnablePassthrough
from langchain_core.output_parsers import StrOutputParser
from langchain_core.messages import HumanMessage
from langchain_openai import OpenAIEmbeddings
from langchain_elasticsearch import ElasticsearchStore
from psycopg_pool import ConnectionPool
from langgraph.checkpoint.postgres import PostgresSaver
from langgraph.prebuilt import create_react_agent


## datos de trazabilidad
os.environ["LANGSMITH_ENDPOINT"]="https://api.smith.langchain.com"
os.environ["LANGCHAIN_API_KEY"] = "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"
os.environ["LANGCHAIN_TRACING_V2"] = "true"
os.environ["LANGCHAIN_PROJECT"] = "gcpaiagent"
os.environ["OPENAI_API_KEY"] ="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"


app = Flask(__name__)

@app.route('/agent', methods=['GET'])
def main():
    #Capturamos variables enviadas
    id_agente = request.args.get('idagente')
    msg = request.args.get('msg')
    #datos de configuracion
    DB_URI = os.environ.get(
        "DB_URI",
        "postgres://postgres:1234@34.173.40.179:5432/"
        #"postgresql://usuario:password@0.0.0.0:5432/basededatos?sslmode=disable"
    )
    connection_kwargs = {
        "autocommit": True,
        "prepare_threshold": 0,
    }
    db_query = ElasticsearchStore(
        es_url="http://34.125.83.15:9200",
        es_user="elastic",
        es_password="L9bWwXp639bERknDgMxK",
        index_name="menu-data",
        embedding=OpenAIEmbeddings(model="text-embedding-3-large"))

    # Herramienta RAG
    retriever = db_query.as_retriever()
    tool_rag =retriever.as_tool(
    name ="datos_menu",
    description="Herramienta que tiene la informaci√≥n detallada (nombre, descripcion, precio, ingredientes, disponibilidad y categoria) de todos los productosdel men√∫"
    )

    stock_actual = {
    "Hamburguesa Cl√°sica": 4,
    "Tacos al Pastor": 0,
    "Ensalada Vegana": 10,
    "Pizza Margarita": 2,
    "Smoothie de Frutas": 0,
    }

    from langchain.agents import tool

    @tool
    def verificar_stock(nombre_plato: str) -> str:
        """
        Verifica la si un plato est√° disponible en el men√∫ y la cantidad disponible del plato.
        """
        nombre_plato = nombre_plato.strip()
        if nombre_plato in stock_actual:
            cantidad = stock_actual[nombre_plato]
            if cantidad > 0:
                return f"‚úÖ El plato '{nombre_plato}' est√° disponible. Quedan {cantidad} unidades."
            else:
                return f"‚ùå Lo siento, el plato '{nombre_plato}' no est√° disponible actualmente."
        else:
            return f"ü§î No encontr√© el plato '{nombre_plato}' en el inventario."

    cupones_validos = {
    "FAMILIA20": 0.20,
    "BEBIDA10": 0.10,
    "VEGANO15": 0.15,
    }

    @tool
    def aplicar_cupon(nombre_cupon: str, total: float) -> str:
        """
        Aplica un cup√≥n de descuento al total si es v√°lido.
        """
        nombre_cupon = nombre_cupon.strip().upper()
        if nombre_cupon in cupones_validos:
            descuento = cupones_validos[nombre_cupon]
            nuevo_total = round(total * (1 - descuento), 2)
            return f"‚úÖ Cup√≥n aplicado. Descuento del {int(descuento*100)}%. Total final: ${nuevo_total}"
        else:
            return f"‚ùå El cup√≥n '{nombre_cupon}' no es v√°lido."

    @tool
    def notificar_camarero(motivo: str = "Asistencia general") -> str:
        """
        Tool para notificar al camarero que el cliente necesita asistencia.
        Puede indicar el motivo: dificultad visual, confusi√≥n, asistencia para ordenar, etc.
        """
        import datetime
        import requests

        hora = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        payload = {
            "motivo": motivo,
            "hora": hora,
            "estado": "pendiente"
        }

        # Reemplaza con tu URL de webhook.site
        webhook_url = "	https://webhook.site/64914f9d-304a-4ac9-bb0a-6ce251d91f61"

        try:
            requests.post(webhook_url, json=payload)
            return f"‚úÖ Notificaci√≥n enviada al camarero. Motivo: '{motivo}' a las {hora}."
        except:
            return "‚ö†Ô∏è No se pudo enviar la notificaci√≥n. Int√©ntalo de nuevo."

    # Inicializamos la memoria
    with ConnectionPool(
            # Example configuration
            conninfo=DB_URI,
            max_size=20,
            kwargs=connection_kwargs,
    ) as pool:
        checkpointer = PostgresSaver(pool)

        # Inicializamos el modelo
        model = ChatOpenAI(model="gpt-4.1-2025-04-14")

        # Agrupamos las herramientas
        tolkit = [tool_rag, verificar_stock, aplicar_cupon]

        prompt = ChatPromptTemplate.from_messages(
            [
                ("system",
                 """
                Eres un asistente virtual amigable y accesible especializado en guiar a personas con discapacidad visual a trav√©s del men√∫ de un restaurante.

                Utiliza √∫nicamente las herramientas disponibles para responder: consulta de men√∫ (RAG), verificaci√≥n de stock, aplicaci√≥n de cupones y recomendaci√≥n de platos similares. Si no cuentas con una herramienta espec√≠fica para responder una pregunta, ind√≠calo de forma clara y sugiere c√≥mo podr√≠as ayudar.

                Tu objetivo es que el cliente se sienta acompa√±ado, informado y en control de su pedido. S√© breve, claro, c√°lido y evita tecnicismos innecesarios. Eres paciente, emp√°tico y act√∫as como un asistente personal que lo gu√≠a en todo momento.

                Sigue esta gu√≠a de conversaci√≥n:

                1. **Saludo y apertura:**
                Da una bienvenida cordial. Pregunta si el cliente ya tiene en mente alg√∫n plato o si quiere que le leas opciones del men√∫ por categor√≠a (ej. entradas, principales, postres, vegetarianos, etc.).

                2. **Consulta del men√∫:**
                Usa la herramienta de men√∫ para brindar informaci√≥n precisa. Describe brevemente cada plato mencionado: nombre, ingredientes principales, precio, y si forma parte de alg√∫n combo. Si el cliente tiene preferencias (ej. sin carne, sin lactosa), sugiere opciones que se alineen.

                3. **Verificaci√≥n de disponibilidad:**
                Antes de confirmar un pedido, verifica si los platos solicitados est√°n disponibles en stock. Si algo no est√° disponible, sugiere una alternativa similar usando la herramienta de recomendaci√≥n.

                4. **Aplicaci√≥n de cupones o promociones:**
                Si el cliente menciona un cup√≥n o desea saber si hay promociones, usa la herramienta para aplicar descuentos o combos y muestra el precio actualizado.

                5. **Resumen del pedido:**
                Repite lo que ha seleccionado el cliente con los precios individuales y el total final. Pregunta si desea a√±adir algo m√°s antes de cerrar el pedido.

                6. **Cierre de atenci√≥n:**
                Agradece su tiempo y disponibilidad. Ind√≠cale c√≥mo puede proceder para finalizar el pedido (ej. llamar al restaurante, pagar presencialmente o pedir ayuda en el local). Si el cliente necesita ayuda adicional, ofr√©cesela de inmediato.

                7. **Estilo de comunicaci√≥n:**
                S√© cercano, conversacional y directo. Mant√©n frases cortas y claras. Si el cliente no entiende algo o parece confundido, repite o simplifica tu respuesta. Tu prioridad es la comodidad y accesibilidad del cliente.

                 """),
                ("human", "{messages}"),
            ]
        )
        # inicializamos el agente
        agent_executor = create_react_agent(model, tolkit, checkpointer=checkpointer, prompt=prompt)
        # ejecutamos el agente
        config = {"configurable": {"thread_id": id_agente}}
        response = agent_executor.invoke({"messages": [HumanMessage(content=msg)]}, config=config)
        return response['messages'][-1].content


if __name__ == '__main__':
    # La aplicaci√≥n escucha en el puerto 8080, requerido por Cloud Run
    app.run(host='0.0.0.0', port=8080)